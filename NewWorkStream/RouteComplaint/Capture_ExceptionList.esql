

DECLARE s_Counter SHARED INT 0;


CREATE COMPUTE MODULE Capture_ExceptionList
	
  CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

	  DECLARE ID CHAR;
	  DECLARE mNumber integer;
	  DECLARE mText char;

	  CALL CopyMessageHeaders();
		
	  SET OutputRoot.Properties.Transactional = false;
		
	  SET ID = BrokerName || '/' ||  
	           ExecutionGroupLabel || '/' ||
	           MessageFlowLabel;

	  SET Environment.Variables.ID = ID;
		
	  -- Temporarily store ExceptionList in OutputRoot.XMLNSC
	  -- to profit from implicit casting of XML parser into CHAR
	  -- which is required for RFH2.usr		
		 
	  -- Pass the ExceptionList to return back the inner most child error number and Error Reason
	  CALL getLastExceptionDetail(InputExceptionList, mNumber, mText);
		
	  -- Track the number of messages that error and add this counter to fields tracked in RFH2 USR folder
	  BEGIN ATOMIC       
            SET s_Counter = s_Counter + 1;
	    set OutputRoot.XMLNSC.ExceptionDump.ErrCounter = s_Counter;
	    SET OutputRoot.XMLNSC.ExceptionDump.ErrList = InputExceptionList;
	    set Environment.Variables.ErrCounter = s_Counter;
	    Set Environment.Variables.errorNum = mNumber;
	    Set Environment.Variables.errorReason = mText;
	  END;
		
	     	
	  SET OutputRoot.MQRFH2.usr=OutputRoot.XMLNSC; 
	  SET OutputRoot.MQRFH2.usr.ErrorHandler.ID = ID; 
	  SET OutputRoot.MQRFH2.usr.Counter = s_Counter; 
	  SET OutputRoot.MQRFH2.usr.ErrorNumber = mNumber; 
	  SET OutputRoot.MQRFH2.usr.ErrorReason = mText;

	  -- Delete the temporary XML body		
	  DELETE FIELD OutputRoot.XMLNSC; 
		
	  -- copy original message body		
	  SET OutputRoot.BLOB = InputBody;

	  RETURN TRUE; 
	
	END;  /* main */
	


  CREATE PROCEDURE getLastExceptionDetail(IN  InputTree reference,
	                                 OUT messageNumber integer,
                                         OUT messageText char)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
	-- Create a reference to the first child of the exception list
   	   declare ptrException reference to InputTree.*[1];
   	    
	-- keep looping while the moves to the child of exception list work 
	WHILE lastmove(ptrException) DO
			
	  -- store the current values for the error number and text
	  IF ptrException.Number is not null THEN
            SET messageNumber = ptrException.Number;
            SET messageText = ptrException.Text;
	  END IF;
  			
	  -- now move to the last child which should be the next exceptionlist
			
	  move ptrException lastchild;
		
	END WHILE; 

  END; /* getLastException */
   
	CREATE PROCEDURE CopyMessageHeaders() 
	BEGIN
		DECLARE I INTEGER;
		DECLARE J INTEGER;
		SET I = 1;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;
